/*
    GRID es un valor de la propiedad display, sirve para ordenar el contenido como si fuera una tabla, con la diferencia que en esta ultima el tama単o de celdas, filas y columnas lo determina el contenido, mientras que con grid es completamente flexible.

    Conceptos Basicos:
        * Grid container:   Es el contenedor completo que va a tener la declaracion "display:grid;", se va a comportar como un elemento en bloque pero dentro va a ser una grilla.
        * Grid item:    Cada uno de los hijos directos que contiene el contenedor, puede haber mas o menos items que cantidad de celdas.
        * Grid cell:    Cada celda que contiene la grilla.
        * Grid tracks (column y row):   Las columnas y las filas del contenedor.
        * Grid area:    Areas definidas por nosotros, puede contener tantas celdas como necesitemos. Las areas deben ser consecutivas.
        * Grid Line (column line y row line):   Cantidad de lineas ("divisorias") del contenedor, arrancan desde el borde izquierdo (column line) y desde el borde superior (row line).

    
    grid-template-columns: Le decimos cuantas columnas vamos a usar con sus respectivos tama単os
                    grid-template-columns: 100px 100px 100px; = 3 columnas de 100px de ancho c/u
                    grid-template-columns: repeat(3(valor)/auto-fill(cuando no sabemos cuantas columnas vamos a necesitar, se van a ir agregando en la misma fila/columna si entran en el ancho del grid)/auto-fit(se van a ir expandiendo cada elemento hijo para ocupar todo el ancho posible) , 100px/minmax(100px,1rf)); ACLARACION: fr es lo mismo que decir flex-grow (que ocupe el espacio sobrante)

                    Auto-fill va a seguir a単adiendo columnas aunque no se usen, mientras que autofit va a usar todo el espacio disponible entre los grid items actuales
            
    grid-template-rows: Le decimos cuantas filas vamos a usar con sus respectivos tama単os


    row-gap: Separacion entre filas, no se separa del contenedor.

    column-gap: Separacion entre columnas, no se separa del contenedor.

*/
*{
    box-sizing: border-box;
}
body {
    margin: 0;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: rgb(28, 51, 69);
    color: rgb(122, 226, 240);
    font-family: 'Courier New', Courier, monospace
}

.conteiner {
    padding: 20px;
    background-color: rgb(42, 54, 90);
    color: rgb(28, 51, 69);
    height: 87vh;
    width: 80vw;
    display: grid;
    grid-template-rows: 100px 1fr;
    row-gap: 10px;
    column-gap: 10px;
    animation: anime 5s 1s infinite alternate;
    font-weight: 900;
    border-radius: 20px;
}

.intro{
    height: 95vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

li{
    margin-top: 5px;
}

.repeat{
    grid-template-columns: repeat(2, 100px) 1fr;
}

.autofill{
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
}

.autofit{
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
}

.box {
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 3rem;
    border: 3px solid black;
}

.box-1 {
    background-color: rosybrown;
}

.box-2 {
    background-color: royalblue;
}

.box-3 {
    background-color: lightsalmon;
}

.box-4 {
    background-color: rgb(214, 191, 191);
}

.box-5 {
    background-color: rgb(61, 189, 189);
}

.box-6 {
    background-color: rgb(211, 29, 29);
}

@keyframes anime {
    0%{
        width: 98vw;          
    }
    25%{
        width: 75vw;         
    }
    50%{
        width: 50vw;        
    }
    100%{
        width: 25vw;           
    }
}